This README file contains information on the contents of the meta-mybeagle layer.

Please see the corresponding sections below for details.

Dependencies
============

  URI: <first dependency>
  branch: <branch name>

  URI: <second dependency>
  branch: <branch name>

  .
  .
  .

Patches
=======

Please submit any patches against the meta-mybeagle layer to the xxxx mailing list (xxxx@zzzz.org)
and cc: the maintainer:

Maintainer: XXX YYYYYY <xxx.yyyyyy@zzzzz.com>

Table of Contents
=================

  I. Adding the meta-mybeagle layer to your build
 II. Misc


I. Adding the meta-mybeagle layer to your build
=================================================

Run 'bitbake-layers add-layer meta-mybeagle'

II. Misc
========

--- replace with specific information about the meta-mybeagle layer ---
## Frequently used commands:
picocom: 
```c
sudo picocom -b 115200 /dev/ttyUSB0
```


folder tree:
meta-mybeagle/
â”œâ”€â”€ conf/
â”‚   â””â”€â”€ layer.conf                    # Layer configuration
â”œâ”€â”€ recipes-core/
â”‚   â””â”€â”€ images/
â”‚       â””â”€â”€ custom-image.bb           # my custom image recipe
â”œâ”€â”€ recipes-kernel/
â”‚   â””â”€â”€ linux/
â”‚       â””â”€â”€ linux-%.bbappend         # Kernel modifications
â”œâ”€â”€ recipes-bsp/
â”‚   â””â”€â”€ bootloader/
â””â”€â”€ recipes-connectivity/
    â””â”€â”€ my-apps/

poky/
â”œâ”€â”€ meta/                            # Core OpenEmbedded recipes
â”œâ”€â”€ meta-poky/                       # Poky distribution config
â”œâ”€â”€ meta-yocto-bsp/                  # Board Support Packages
â””â”€â”€ bitbake/                         # Build tool

build/
â”œâ”€â”€ conf/
â”‚   â”œâ”€â”€ local.conf                   # Build configuration (YOU modify)
â”‚   â”œâ”€â”€ bblayers.conf                # Layer configuration (YOU modify)
â”‚   â””â”€â”€ templateconf.cfg


2. âœ… Key Configuration Files Breakdown âœ…
local.conf (Your Build Configuration)

Source: Template from Poky, but YOU customize it
Purpose: Machine target, package management, build options
Key settings you likely modified:

bashMACHINE = "beaglebone-yocto"
DISTRO = "poky"
EXTRA_IMAGE_FEATURES += "debug-tweaks"
CORE_IMAGE_EXTRA_INSTALL += "openssh"
bblayers.conf (Layer Stack Configuration)

Source: Template from Poky, but YOU add your layers
Purpose: Tells BitBake which layers to include
Your additions:

bashBBLAYERS ?= " \
  /path/to/poky/meta \
  /path/to/poky/meta-poky \
  /path/to/poky/meta-yocto-bsp \
  /path/to/meta-yourlayer \
"
Your Custom Image Recipe (your-custom-image.bb)

Source: YOUR custom layer
Inherits from: core-image-minimal (from Poky)
Your customizations:

pythoninherit core-image

# Root password and auto-resize
EXTRA_IMAGE_FEATURES += "debug-tweaks"
IMAGE_INSTALL_append = " resize-helper"

# Additional packages
IMAGE_INSTALL += " \
    openssh \
    nano \
    your-gpio-driver \
"

# Rootfs size
IMAGE_ROOTFS_EXTRA_SPACE = "2048000"

3. Yocto Build Workflow
Phase 1: Configuration Resolution
mermaidgraph TD
    A[bitbake your-image] --> B[Read bblayers.conf]
    B --> C[Load all layers]
    C --> D[Read local.conf]
    D --> E[Parse all .bb/.bbappend files]
    E --> F[Create dependency graph]
Phase 2: Recipe Resolution Priority

Your Layer (highest priority if BBFILE_PRIORITY set high)
Board-specific layer (meta-yocto-bsp)
Distribution layer (meta-poky)
Core layer (meta)

Phase 3: Build Execution
1. Fetch sources (do_fetch)
2. Unpack sources (do_unpack)  
3. Patch sources (do_patch)
4. Configure build (do_configure)
5. Compile code (do_compile)
6. Install to staging (do_install)
7. Package creation (do_package)
8. Rootfs assembly (do_rootfs)
9. Image creation (do_image)

4. How Your Custom Layer Overrides Work
File Priority System:

Layer Priority: Set in your layer.conf

pythonBBFILE_PRIORITY_yourlayer = "10"  # Higher = more priority

Recipe Versioning: Higher version wins

python# In your layer
PV = "1.0"
PR = "r1"

BBAPPEND Files: Always applied on top of base recipes

python# In your linux-%.bbappend
SRC_URI += "file://your-custom.patch"
KERNEL_MODULE_AUTOLOAD += "your_gpio_driver"

5. Build Process Flow
When you run bitbake your-custom-image:

BitBake reads bblayers.conf â†’ Knows about your layer
Parses your image recipe â†’ Sees inherit core-image-minimal
Pulls base recipe from meta/recipes-core/images/core-image-minimal.bb
Applies your modifications (password, resize, packages)
Resolves dependencies for all packages
Builds kernel with your .bbappend modifications
Includes your GPIO driver if specified in IMAGE_INSTALL
Creates rootfs with all components
Generates final image (.wic file)



âœ… SD card PARTUUID issue parmenent fix âœ… :

meta-mybeagle/
â”œâ”€â”€ wic/
â”‚   â””â”€â”€ beaglebone-sdcard.wks
â”œâ”€â”€ recipes-bsp/
â”‚   â””â”€â”€ boot-config/
â”‚       â”œâ”€â”€ boot-config-fix.bb
â”‚       â””â”€â”€ files/
â”‚           â”œâ”€â”€ extlinux.conf
â”‚           â””â”€â”€ uEnv.txt
â””â”€â”€ recipes-core/
    â””â”€â”€ images/
        â””â”€â”€ custom-image.bb
**PERFECT! ðŸŽ‰ COMPLETE SUCCESS!**

Your custom Yocto image with the GPIO driver has built successfully! All tasks completed without errors.

## **What You've Accomplished:**

âœ… **Fixed the dependency issue**  
âœ… **GPIO driver built successfully**  
âœ… **Custom image created successfully**  
âœ… **6224 tasks completed - all succeeded**

## **Your Build Results:**

The image is now ready and should be located at:
```bash
ls -la /home/ajianan/project/yocto/sources/tmp/deploy/images/beaglebone/
```

Look for files like:
- `custom-image-beaglebone.wic` (main disk image)
- `custom-image-beaglebone.tar.bz2` (rootfs archive)

## **Next Steps - Deploy and Test:**

### **1. Flash to SD Card:**
```bash
# Find your image
ls -la /home/ajianan/project/yocto/sources/tmp/deploy/images/beaglebone/custom-image*

# Flash to SD card (replace /dev/sdX with your SD card)
sudo dd if=/home/ajianan/project/yocto/sources/tmp/deploy/images/beaglebone/custom-image-beaglebone.wic of=/dev/sdX bs=1M status=progress
```

### **2. Boot BeagleBone Black:**
- Insert SD card
- Connect UART cable (optional, for console)
- Power on

### **3. Test Your GPIO Driver:**
Once booted:
```bash
# Check if driver loaded
lsmod | grep gpio_driver
dmesg | tail -10

# Check device file
ls -la /dev/bbb_gpio

# Test LED control
echo "1" > /dev/bbb_gpio  # Turn LED ON
echo "0" > /dev/bbb_gpio  # Turn LED OFF

# Test button reading
cat /dev/bbb_gpio
```
âœ… SD card PARTUUID issue tmp fix âœ… :

Perfect! I can see your SD card is already mounted automatically by Ubuntu. The SD card is `/dev/sda` and it's already mounted at:

- Boot partition: `/media/ajianan/boot` 
- Root partition: `/media/ajianan/root`

## Quick Fix - Edit the Boot Files

```bash
# Check what's in the boot partition
ls -la /media/ajianan/boot/

# Edit uEnv.txt directly
sudo nano /media/ajianan/boot/uEnv.txt
```

**Replace the entire content with:**
```bash
console=ttyS0,115200n8
bootargs=console=ttyS0,115200n8 root=/dev/mmcblk0p2 rootfstype=ext4 rootwait rw
```

## Or if there's an extlinux directory:

```bash
# Check for extlinux
ls -la /media/ajianan/boot/extlinux/

# If it exists, edit it
sudo nano /media/ajianan/boot/extlinux/extlinux.conf
```

**Replace with:**
```bash
DEFAULT Yocto
TIMEOUT 10

LABEL Yocto
    KERNEL ../zImage
    FDTDIR ../
    APPEND console=ttyS0,115200n8 root=/dev/mmcblk0p2 rootfstype=ext4 rootwait rw
```

## Finalize

```bash
# Sync to make sure changes are written
sudo sync

# Safely unmount
sudo umount /media/ajianan/boot
sudo umount /media/ajianan/root
```

Now plug the SD card into your BeagleBone and boot - it should work without the PARTUUID error!

This should take literally 30 seconds to fix. ðŸš€

================================================================================================     

## To flash the image on to sd card using wic file 

# Find the new image
find tmp/deploy/images/beaglebone/ -name "custom-image*.wic"

# Flash it (replace /dev/sdX with your SD card)
sudo dd if=tmp/deploy/images/beaglebone/custom-image-beaglebone.wic of=/dev/sdX bs=4M

=================================================================================================
